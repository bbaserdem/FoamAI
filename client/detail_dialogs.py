"""
Detail Dialogs for OpenFOAM Desktop Application
Popup dialogs for detailed editing of mesh, solver, and parameters
"""
import os
import json
from typing import Optional, Dict, Any
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
                               QTextEdit, QLineEdit, QFormLayout, QComboBox, QSpinBox,
                               QDoubleSpinBox, QGroupBox, QTabWidget, QWidget, QFileDialog,
                               QMessageBox, QDialogButtonBox, QListWidget, QListWidgetItem,
                               QTextBrowser, QCheckBox, QScrollArea, QFrame)
from PySide6.QtCore import Qt, Signal, QSize
from PySide6.QtGui import QFont, QSyntaxHighlighter, QTextCharFormat, QColor, QTextDocument

from simulation_state import MeshData, SolverData, ParametersData

class MeshDetailDialog(QDialog):
    """Dialog for viewing and editing mesh details"""
    
    def __init__(self, mesh_data: MeshData, parent=None):
        super().__init__(parent)
        self.mesh_data = mesh_data
        self.setWindowTitle("Mesh Details")
        self.setModal(True)
        self.resize(600, 500)
        
        self.setup_ui()
        self.populate_data()
    
    def setup_ui(self):
        """Setup the dialog UI"""
        layout = QVBoxLayout(self)
        
        # Tab widget for different views
        self.tab_widget = QTabWidget()
        
        # Overview tab
        overview_tab = QWidget()
        overview_layout = QVBoxLayout(overview_tab)
        
        # Description
        desc_group = QGroupBox("Description")
        desc_layout = QVBoxLayout(desc_group)
        self.description_edit = QTextEdit()
        self.description_edit.setMaximumHeight(80)
        self.description_edit.setPlaceholderText("Enter mesh description...")
        desc_layout.addWidget(self.description_edit)
        overview_layout.addWidget(desc_group)
        
        # File info
        file_group = QGroupBox("File Information")
        file_layout = QFormLayout(file_group)
        
        self.file_path_label = QLabel("No file selected")
        file_layout.addRow("File Path:", self.file_path_label)
        
        self.file_type_label = QLabel("Unknown")
        file_layout.addRow("File Type:", self.file_type_label)
        
        # Upload button
        upload_layout = QHBoxLayout()
        self.upload_button = QPushButton("Upload New File")
        self.upload_button.clicked.connect(self.upload_file)
        upload_layout.addWidget(self.upload_button)
        upload_layout.addStretch()
        file_layout.addRow("", upload_layout)
        
        overview_layout.addWidget(file_group)
        
        # AI Generation info
        ai_group = QGroupBox("AI Generation")
        ai_layout = QVBoxLayout(ai_group)
        self.ai_generated_label = QLabel("Not generated by AI")
        ai_layout.addWidget(self.ai_generated_label)
        overview_layout.addWidget(ai_group)
        
        overview_layout.addStretch()
        self.tab_widget.addTab(overview_tab, "Overview")
        
        # File content tab
        content_tab = QWidget()
        content_layout = QVBoxLayout(content_tab)
        
        self.content_edit = QTextEdit()
        self.content_edit.setFont(QFont("Consolas", 10))
        self.content_edit.setPlaceholderText("File content will appear here...")
        content_layout.addWidget(self.content_edit)
        
        self.tab_widget.addTab(content_tab, "File Content")
        
        layout.addWidget(self.tab_widget)
        
        # Dialog buttons
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def populate_data(self):
        """Populate dialog with mesh data"""
        if self.mesh_data.description:
            self.description_edit.setPlainText(self.mesh_data.description)
        
        if self.mesh_data.file_path:
            self.file_path_label.setText(self.mesh_data.file_path)
            self.file_type_label.setText(self.mesh_data.file_type or "Unknown")
        
        if self.mesh_data.content:
            self.content_edit.setPlainText(self.mesh_data.content)
        
        if self.mesh_data.generated_by_ai:
            self.ai_generated_label.setText("Generated by AI")
            self.ai_generated_label.setStyleSheet("color: #0078d4; font-weight: bold;")
    
    def upload_file(self):
        """Handle file upload"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select Mesh File",
            "",
            "Mesh Files (*.stl *.foam *.obj);;All Files (*)"
        )
        
        if file_path:
            self.file_path_label.setText(file_path)
            file_ext = os.path.splitext(file_path)[1].lower()
            self.file_type_label.setText(file_ext)
            
            # Try to read file content
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    self.content_edit.setPlainText(content)
            except Exception as e:
                self.content_edit.setPlainText(f"Error reading file: {str(e)}")
    
    def get_mesh_data(self) -> MeshData:
        """Get updated mesh data"""
        return MeshData(
            description=self.description_edit.toPlainText(),
            file_path=self.file_path_label.text() if self.file_path_label.text() != "No file selected" else None,
            file_type=self.file_type_label.text(),
            content=self.content_edit.toPlainText(),
            generated_by_ai=self.mesh_data.generated_by_ai
        )

class SolverDetailDialog(QDialog):
    """Dialog for selecting and configuring solver"""
    
    def __init__(self, solver_data: SolverData, parent=None):
        super().__init__(parent)
        self.solver_data = solver_data
        self.setWindowTitle("Solver Selection")
        self.setModal(True)
        self.resize(700, 600)
        
        self.setup_ui()
        self.populate_data()
    
    def setup_ui(self):
        """Setup the dialog UI"""
        layout = QVBoxLayout(self)
        
        # Current selection
        current_group = QGroupBox("Current Selection")
        current_layout = QVBoxLayout(current_group)
        
        self.current_solver_label = QLabel("No solver selected")
        self.current_solver_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        current_layout.addWidget(self.current_solver_label)
        
        self.current_description_label = QLabel("Select a solver from the list below")
        self.current_description_label.setWordWrap(True)
        current_layout.addWidget(self.current_description_label)
        
        # Justification
        self.justification_edit = QTextEdit()
        self.justification_edit.setMaximumHeight(60)
        self.justification_edit.setPlaceholderText("AI justification will appear here...")
        current_layout.addWidget(QLabel("Justification:"))
        current_layout.addWidget(self.justification_edit)
        
        layout.addWidget(current_group)
        
        # Available solvers
        solvers_group = QGroupBox("Available Solvers")
        solvers_layout = QVBoxLayout(solvers_group)
        
        self.solver_list = QListWidget()
        self.solver_list.itemClicked.connect(self.on_solver_selected)
        solvers_layout.addWidget(self.solver_list)
        
        # Solver description
        self.solver_description = QTextBrowser()
        self.solver_description.setMaximumHeight(100)
        solvers_layout.addWidget(QLabel("Description:"))
        solvers_layout.addWidget(self.solver_description)
        
        layout.addWidget(solvers_group)
        
        # Dialog buttons
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def populate_data(self):
        """Populate dialog with solver data"""
        # Set current solver
        if self.solver_data.name:
            self.current_solver_label.setText(self.solver_data.name)
            self.current_description_label.setText(self.solver_data.description)
            self.justification_edit.setPlainText(self.solver_data.justification)
        
        # Populate solver list
        for solver_name, description in self.solver_data.available_solvers.items():
            item = QListWidgetItem(solver_name)
            item.setData(Qt.UserRole, description)
            self.solver_list.addItem(item)
            
            # Select current solver
            if solver_name == self.solver_data.name:
                item.setSelected(True)
                self.solver_description.setPlainText(description)
    
    def on_solver_selected(self, item):
        """Handle solver selection"""
        solver_name = item.text()
        description = item.data(Qt.UserRole)
        
        self.current_solver_label.setText(solver_name)
        self.current_description_label.setText(description)
        self.solver_description.setPlainText(description)
        
        # Clear AI justification when manually selecting
        if not self.solver_data.generated_by_ai:
            self.justification_edit.setPlainText("")
    
    def get_solver_data(self) -> SolverData:
        """Get updated solver data"""
        selected_items = self.solver_list.selectedItems()
        if selected_items:
            solver_name = selected_items[0].text()
            description = selected_items[0].data(Qt.UserRole)
        else:
            solver_name = self.solver_data.name
            description = self.solver_data.description
        
        return SolverData(
            name=solver_name,
            description=description,
            justification=self.justification_edit.toPlainText(),
            parameters=self.solver_data.parameters.copy(),
            available_solvers=self.solver_data.available_solvers.copy(),
            generated_by_ai=self.solver_data.generated_by_ai
        )

class ParametersDetailDialog(QDialog):
    """Dialog for configuring simulation parameters"""
    
    def __init__(self, parameters_data: ParametersData, parent=None):
        super().__init__(parent)
        self.parameters_data = parameters_data
        self.setWindowTitle("Parameters Configuration")
        self.setModal(True)
        self.resize(600, 500)
        
        self.setup_ui()
        self.populate_data()
    
    def setup_ui(self):
        """Setup the dialog UI"""
        layout = QVBoxLayout(self)
        
        # Tab widget
        self.tab_widget = QTabWidget()
        
        # Overview tab
        overview_tab = QWidget()
        overview_layout = QVBoxLayout(overview_tab)
        
        # Description
        desc_group = QGroupBox("Description")
        desc_layout = QVBoxLayout(desc_group)
        self.description_edit = QTextEdit()
        self.description_edit.setMaximumHeight(80)
        self.description_edit.setPlaceholderText("Enter parameters description...")
        desc_layout.addWidget(self.description_edit)
        overview_layout.addWidget(desc_group)
        
        # File info
        file_group = QGroupBox("File Information")
        file_layout = QFormLayout(file_group)
        
        self.file_path_label = QLabel("No file selected")
        file_layout.addRow("File Path:", self.file_path_label)
        
        # Upload button
        upload_layout = QHBoxLayout()
        self.upload_button = QPushButton("Upload Parameters File")
        self.upload_button.clicked.connect(self.upload_file)
        upload_layout.addWidget(self.upload_button)
        upload_layout.addStretch()
        file_layout.addRow("", upload_layout)
        
        overview_layout.addWidget(file_group)
        
        # AI Generation info
        ai_group = QGroupBox("AI Generation")
        ai_layout = QVBoxLayout(ai_group)
        self.ai_generated_label = QLabel("Not generated by AI")
        ai_layout.addWidget(self.ai_generated_label)
        overview_layout.addWidget(ai_group)
        
        overview_layout.addStretch()
        self.tab_widget.addTab(overview_tab, "Overview")
        
        # Parameters tab
        params_tab = QWidget()
        params_layout = QVBoxLayout(params_tab)
        
        # Add parameter button
        add_param_layout = QHBoxLayout()
        self.add_param_button = QPushButton("Add Parameter")
        self.add_param_button.clicked.connect(self.add_parameter)
        add_param_layout.addWidget(self.add_param_button)
        add_param_layout.addStretch()
        params_layout.addLayout(add_param_layout)
        
        # Parameters scroll area
        self.params_scroll = QScrollArea()
        self.params_widget = QWidget()
        self.params_layout = QVBoxLayout(self.params_widget)
        self.params_scroll.setWidget(self.params_widget)
        self.params_scroll.setWidgetResizable(True)
        params_layout.addWidget(self.params_scroll)
        
        self.tab_widget.addTab(params_tab, "Parameters")
        
        # Raw content tab
        content_tab = QWidget()
        content_layout = QVBoxLayout(content_tab)
        
        self.content_edit = QTextEdit()
        self.content_edit.setFont(QFont("Consolas", 10))
        self.content_edit.setPlaceholderText("Raw parameter content...")
        content_layout.addWidget(self.content_edit)
        
        self.tab_widget.addTab(content_tab, "Raw Content")
        
        layout.addWidget(self.tab_widget)
        
        # Dialog buttons
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)
    
    def populate_data(self):
        """Populate dialog with parameters data"""
        if self.parameters_data.description:
            self.description_edit.setPlainText(self.parameters_data.description)
        
        if self.parameters_data.file_path:
            self.file_path_label.setText(self.parameters_data.file_path)
        
        if self.parameters_data.content:
            self.content_edit.setPlainText(self.parameters_data.content)
        
        if self.parameters_data.generated_by_ai:
            self.ai_generated_label.setText("Generated by AI")
            self.ai_generated_label.setStyleSheet("color: #0078d4; font-weight: bold;")
        
        # Populate parameters
        for key, value in self.parameters_data.parameters.items():
            self.add_parameter_widget(key, value)
    
    def add_parameter(self):
        """Add a new parameter widget"""
        self.add_parameter_widget("", "")
    
    def add_parameter_widget(self, key: str, value: str):
        """Add a parameter widget to the layout"""
        param_frame = QFrame()
        param_frame.setFrameStyle(QFrame.Box)
        param_layout = QHBoxLayout(param_frame)
        
        # Parameter name
        name_edit = QLineEdit(key)
        name_edit.setPlaceholderText("Parameter name")
        param_layout.addWidget(name_edit)
        
        # Parameter value
        value_edit = QLineEdit(str(value))
        value_edit.setPlaceholderText("Parameter value")
        param_layout.addWidget(value_edit)
        
        # Remove button
        remove_button = QPushButton("Remove")
        remove_button.clicked.connect(lambda: self.remove_parameter_widget(param_frame))
        param_layout.addWidget(remove_button)
        
        self.params_layout.addWidget(param_frame)
    
    def remove_parameter_widget(self, widget):
        """Remove a parameter widget"""
        widget.setParent(None)
        widget.deleteLater()
    
    def upload_file(self):
        """Handle file upload"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select Parameters File",
            "",
            "Parameter Files (*.json *.yaml *.yml *.txt);;All Files (*)"
        )
        
        if file_path:
            self.file_path_label.setText(file_path)
            
            # Try to read file content
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    self.content_edit.setPlainText(content)
                    
                    # Try to parse as JSON
                    if file_path.endswith('.json'):
                        try:
                            params = json.loads(content)
                            if isinstance(params, dict):
                                # Clear existing parameters
                                for i in reversed(range(self.params_layout.count())):
                                    child = self.params_layout.itemAt(i).widget()
                                    if child:
                                        child.setParent(None)
                                
                                # Add new parameters
                                for key, value in params.items():
                                    self.add_parameter_widget(key, value)
                        except json.JSONDecodeError:
                            pass
                            
            except Exception as e:
                self.content_edit.setPlainText(f"Error reading file: {str(e)}")
    
    def get_parameters_data(self) -> ParametersData:
        """Get updated parameters data"""
        # Collect parameters from widgets
        parameters = {}
        for i in range(self.params_layout.count()):
            widget = self.params_layout.itemAt(i).widget()
            if widget and hasattr(widget, 'layout'):
                layout = widget.layout()
                if layout.count() >= 2:
                    name_edit = layout.itemAt(0).widget()
                    value_edit = layout.itemAt(1).widget()
                    if name_edit and value_edit and name_edit.text():
                        parameters[name_edit.text()] = value_edit.text()
        
        return ParametersData(
            description=self.description_edit.toPlainText(),
            parameters=parameters,
            file_path=self.file_path_label.text() if self.file_path_label.text() != "No file selected" else None,
            content=self.content_edit.toPlainText(),
            generated_by_ai=self.parameters_data.generated_by_ai
        ) 